/*! leaflet.elevation 04-09-2017 */

/*

The MIT License (MIT)

Copyright (c) 2013 Felix Bache

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

L.Control.Elevation=L.Control.extend({
    options:{
        position:"topright",
        theme:"lime-theme",
        width:600,
        height:175,
        margins:{top:10,right:20,bottom:30,left:800},
        useHeightIndicator:!0,
        interpolation:d3.curveLinear,
        hoverNumber:{decimalsX:3,decimalsY:0,formatter:void 0},
        xTicks:void 0,yTicks:void 0,
        collapsed:!1,
        yAxisMin:void 0,yAxisMax:void 0,
        forceAxisBounds:!1,
        controlButton:{iconCssClass:"elevation-toggle-icon",title:"Elevation"},
        imperial:!1
    },
    __mileFactor:.621371,__footFactor:3.28084,
    onRemove:function(a){this._container=null},
    onAdd:function(a){
        this._map=a;var b=this.options,c=b.margins;
        b.xTicks=b.xTicks||Math.round(this._width()/75),b.yTicks=b.yTicks||Math.round(this._height()/30),b.hoverNumber.formatter=b.hoverNumber.formatter||this._formatter;
        var d=this._x=d3.scaleLinear().range([0,this._width()]),
        e=this._y=d3.scaleLinear().range([this._height(),0]),
        f=(
            this._area=d3.area().curve(b.interpolation).x(
                function(a){
                    var b=d(a.dist);
                    return a.xDiagCoord=b,b
                }).y0(this._height()).y1(function(a){
                    return e(a.altitude)
                }),
            this._container=L.DomUtil.create("div","elevation")
        );
        L.DomUtil.addClass(f,b.theme),this._initToggle();
        var g=d3.select(f);
        g.attr("width",b.width);
        var h=g.append("svg");
        h.attr("width",b.width).attr("class","background").attr("height",b.height).append("g").attr("transform","translate("+c.left+","+c.top+")");
        var i=d3.line();
        i=i.x(function(a){
            return d3.mouse(h.select("g"))[0]
        }).y(function(a){
            return this._height()
        });
        var j=d3.select(this._container).select("svg").select("g");
        this._areapath=j.append("path").attr("class","area");
        var k=this._background=j.append("rect").attr("width",this._width()).attr("height",this._height()).style("fill","none").style("stroke","none").style("pointer-events","all");
        k.on("mousemove.focus",this._mousemoveHandler.bind(this)).on("mouseout.focus",this._mouseoutHandler.bind(this)).on("mousedown.drag",this._dragStartHandler.bind(this)).on("mousemove.drag",this._dragHandler.bind(this)),L.DomEvent.on(this._container,"mouseup",this._dragEndHandler,this),this._xaxisgraphicnode=j.append("g"),this._yaxisgraphicnode=j.append("g"),this._appendXaxis(this._xaxisgraphicnode),this._appendYaxis(this._yaxisgraphicnode);
        var l=this._focusG=j.append("g");
        return this._mousefocus=l.append("svg:line").attr("class","mouse-focus-line").attr("x2","0").attr("y2","0").attr("x1","0").attr("y1","0"),
            /* MODIFIED HERE: set to hidden to hide height and kms on elevation profile*/
            this._focuslabelX=l.append("svg:text").style("pointer-events","none").attr("class","mouse-focus-label-x").style("visibility","hidden"),
            this._focuslabelY=l.append("svg:text").style("pointer-events","none").attr("class","mouse-focus-label-y").style("visibility","hidden"),
            this._data&&this._applyData(),f
    },
    _dragHandler:function(){
        return;
        d3.event.preventDefault(),
        d3.event.stopPropagation(),
        this._gotDragged=!0,
        this._drawDragRectangle()
    },
    _drawDragRectangle:function(){
            if(this._dragStartCoords){
                var a=this._dragCurrentCoords=d3.mouse(this._background.node()),
                    b=Math.min(this._dragStartCoords[0],a[0]),
                    c=Math.max(this._dragStartCoords[0],a[0]);
                if(this._dragRectangle||this._dragRectangleG)
                    this._dragRectangle.attr("width",c-b).attr("x",b);
                else{
                    var d=d3.select(this._container).select("svg").select("g");
                    this._dragRectangleG=d.append("g"),
                    this._dragRectangle=this._dragRectangleG.append("rect").attr("width",c-b).attr("height",this._height()).attr("x",b).attr("class","mouse-drag").style("pointer-events","none")
                }
            }
     },
     _drawRectangle:function(start,end,start_idx,end_idx){
                 if (!this._data) return;
                 var b=start*this._width(),
                     c=end*this._width();
                 if(this._dragRectangle||this._dragRectangleG)
                     this._dragRectangle.attr("width",c-b).attr("x",b);
                 else{
                     var d=d3.select(this._container).select("svg").select("g");
                     this._dragRectangleG=d.append("g"),
                     this._dragRectangle=this._dragRectangleG.append("rect").attr("width",c-b).attr("height",this._height()).attr("x",b).attr("class","mouse-drag").style("pointer-events","none")
                 }
                 const pt1 = this._data[start_idx];
                 const pt2 = this._data[end_idx];
                 if(this._startCircle) {
                     this._startCircle.setLatLng([pt1.y, pt1.x]);
                     this._endCircle.setBounds([[pt2.y, pt2.x], [pt2.y, pt2.x]]);
                 }
      },
     _addSliderCircles:function(){
         if(this._data && this._data.length > 0) {
             const pt1 = this._data[0];
             const pt2 = this._data[this._data.length - 1];
             if (!this._startCircle) {
                 this._startCircle = L.circleMarker([pt1.y, pt1.x], {
                     className: 'start-marker',
                     radius: 6
                 });
                 this._startCircle.addTo(this._map);
                 this._endCircle = L.imageOverlay('/res/end.png', [[pt2.y, pt2.x], [pt2.y, pt2.x]], {zIndex:1200});
                 this._endCircle.addTo(this._map);
                 this._endCircle.getElement().style.border = '2px solid white';
                 this._endCircle.getElement().classList.add('dontselect','end-circle');
                 this._endCircle.bringToFront();
             } else {
                 this._endCircle.setBounds([[pt2.y, pt2.x], [pt2.y, pt2.x]]);
             }
         }
     },
     _removeSliderCircles:function(){
         if (this._startCircle) {
             this._startCircle.remove();
             this._endCircle.remove();
             this._startCircle = null;
             this._endCircle = null;
         }
     },
     _resetDrag:function(){
         if (this._data) {
             const start_idx = this._findItemForX(0), end_idx = this._findItemForX(this._width());
             const pt1 = this._data[start_idx];
             const pt2 = this._data[end_idx];
             if(this._startCircle) {
                 this._startCircle.setLatLng([pt1.y, pt1.x]);
                 this._endCircle.setBounds([[pt2.y, pt2.x], [pt2.y, pt2.x]]);
             }
         }
         this._dragRectangleG && (
            this._dragRectangleG.remove(),
            this._dragRectangleG=null,
            this._dragRectangle=null,
            this._hidePositionMarker(),
            (!this._startCircleÂ || this._startCircle.bringToFront()),
            (!this._endCircle || this._endCircle.bringToFront())
            //this._map.fitBounds(this._fullExtent)
         )
     },
     _dragEndHandler:function(){
            if(!this._dragStartCoords||!this._gotDragged)
                return this._dragStartCoords=null, this._gotDragged=!1/*, void this._resetDrag()*/;
            this._hidePositionMarker();
            var a=this._findItemForX(this._dragStartCoords[0]),
                b=this._findItemForX(this._dragCurrentCoords[0]);
            this._fitSection(a,b),this._dragStartCoords=null,this._gotDragged=!1
      },
      _dragStartHandler:function(){
            d3.event.preventDefault(),
            d3.event.stopPropagation(),
            this._gotDragged=!1,
            this._dragStartCoords=d3.mouse(this._background.node())
      },
      _findItemForX:function(a){
            var b=d3.bisector(function(a){
                return a.dist
            }).left,
                c=this._x.invert(a);
            return b(this._data,c)
      },
      _findIndexForX:function(a){
            const idx = this._findItemForX(a);
            return this._data[idx].index;
      },
      _findItemForLatLng:function(a){
            var b=null,c=1/0;
            return this._data.forEach(function(d){
                var e=a.distanceTo(d.latlng);
                c>e&&(c=e,b=d)
            }),b
      },
      _fitSection:function(a,b){
            var c=Math.min(a,b),d=Math.max(a,b),e=this._calculateFullExtent(this._data.slice(c,d));
            this._map.fitBounds(e)
      },
      _initToggle:function(){
            var a=this._container;
            if(a.setAttribute("aria-haspopup",!0),L.Browser.touch?L.DomEvent.on(a,"click",L.DomEvent.stopPropagation):L.DomEvent.disableClickPropagation(a),this.options.collapsed){
                this._collapse(),L.Browser.android||L.DomEvent.on(a,"mouseover",this._expand,this).on(a,"mouseout",this._collapse,this);
                var b=this._button=L.DomUtil.create("a","elevation-toggle "+this.options.controlButton.iconCssClass,a);
                b.href="#",b.title=this.options.controlButton.title,L.Browser.touch?L.DomEvent.on(b,"click",L.DomEvent.stop).on(b,"click",this._expand,this):L.DomEvent.on(b,"focus",this._expand,this),this._map.on("click",this._collapse,this)}
      },
      _expand:function(){
          this._container.className=this._container.className.replace(" elevation-collapsed","")
      },
      _collapse:function(){
          L.DomUtil.addClass(this._container,"elevation-collapsed")
      },
      _width:function(){
          var a=this.options;
          return a.width-a.margins.left-a.margins.right
      },
      _height:function(){
          var a=this.options;
          return a.height-a.margins.top-a.margins.bottom
      },
      _formatter:function(a,b,c){
          var d;d=0===b?Math.round(a)+"":L.Util.formatNum(a,b)+"";
          var e=d.split(".");
          if(e[1]){
              for(var f=b-e[1].length;f>0;f--)
                e[1]+="0";d=e.join(c||".")
            }
            return d
        },
        _appendYaxis:function(a){
                        var b=this.options;
                        b.imperial?a.attr("class","y axis").call(d3.axisLeft().scale(this._y).ticks(this.options.yTicks)).append("text").attr("x",-37).attr("y",3).style("text-anchor","end").text("ft"):a.attr("class","y axis").call(d3.axisLeft().scale(this._y).ticks(this.options.yTicks)).append("text").attr("x",-45).attr("y",3).style("text-anchor","end").text("m")
        },
        _appendXaxis:function(a){
                            var b=this.options;
                            b.imperial?a.attr("class","x axis").attr("transform","translate(0,"+this._height().toFixed(0)+")").call(d3.axisBottom().scale(this._x).ticks(this.options.xTicks)).append("text").attr("x",this._width()+10).attr("y",15).style("text-anchor","end").text("mi"):a.attr("class","x axis").attr("transform","translate(0,"+this._height()+")").call(d3.axisBottom().scale(this._x).ticks(this.options.xTicks)).append("text").attr("x",this._width()+20).attr("y",15).style("text-anchor","end").text("km")
        },
        _updateAxis:function(){
                            this._xaxisgraphicnode.selectAll("g").remove(),
                            this._xaxisgraphicnode.selectAll("path").remove(),
                            this._xaxisgraphicnode.selectAll("text").remove(),
                            this._yaxisgraphicnode.selectAll("g").remove(),
                            this._yaxisgraphicnode.selectAll("path").remove(),
                            this._yaxisgraphicnode.selectAll("text").remove(),
                            this._appendXaxis(this._xaxisgraphicnode),
                            this._appendYaxis(this._yaxisgraphicnode)
        },
        _mouseoutHandler:function(){
            this._hidePositionMarker();
            this.hide_cursor_data();
        },
        _hidePositionMarker:function(){
                                this._marker && (
                                    this._map.removeLayer(this._marker),
                                    this._marker=null
                                ),
                                this._mouseHeightFocus && (
                                    this._mouseHeightFocus.style("visibility","hidden"),
                                    this._mouseHeightFocusLabel.style("visibility","hidden")),
                                    this._pointG&&this._pointG.style("visibility","hidden"),
                                    this._focusG.style("visibility","hidden")
        },
        _mousemoveHandler:function(a,b,c){
            if (d3.select(".trace-info").style("visibility") == "hidden") return;
            if(this._data&&0!==this._data.length){
                var d_offset=d3.mouse(this._background.node())[0],
                    d=(d_offset<0)?(this._width()+20+d_offset):d_offset,
                    e=this.options,
                    idx=this._findItemForX(d),
                    f=this._data[Math.min(idx,this._data.length-1)],
                    g=f.altitude,
                    h=f.dist,
                    i=f.latlng,
                    j=e.hoverNumber.formatter(g,e.hoverNumber.decimalsY);
                if (idx == this._data.length) return;
                var pt1 = this._data[Math.max(idx-1, 0)], pt2 = this._data[Math.min(idx+1, this._data.length-1)];
                this.display_cursor_data(
                    h,
                    (pt2.dist-pt1.dist)/(Math.max(0,pt2.latlng.meta.time-pt1.latlng.meta.time)/ (1000 * 3600)),
                    g,
                    (pt2.altitude-pt1.altitude)/((pt2.dist-pt1.dist) * 10)
                );
                e.hoverNumber.formatter(h,e.hoverNumber.decimalsX);
                this._showDiagramIndicator(f,d);
                var k=this._map.latLngToLayerPoint(i);
                if(e.useHeightIndicator){
                    if(!this._mouseHeightFocus){
                        var l=d3.select(".leaflet-overlay-pane svg").append("g");
                        this._mouseHeightFocus=l.append("svg:line").attr("class",e.theme+" height-focus line").attr("x2",0).attr("y2",0).attr("x1",0).attr("y1",0);
                        var m=this._pointG=l.append("g");
                        m.append("svg:circle").attr("r",6).attr("cx",0).attr("cy",0).attr("class",e.theme+" height-focus circle-lower"),
                        this._mouseHeightFocusLabel=l.append("svg:text").attr("class",e.theme+" height-focus-label").style("pointer-events","none")
                    }
                    var n=this._height()/this._maxElevation*g,o=k.y-n;
                    this._mouseHeightFocus.attr("x1",k.x).attr("x2",k.x).attr("y1",k.y).attr("y2",o).style("visibility","hidden"),
                    this._pointG.attr("transform","translate("+k.x+","+k.y+")").style("visibility","visible"),
                    /* MODIFIED HERE: set to hidden to get rid of height indicator on map*/
                    e.imperial?this._mouseHeightFocusLabel.attr("x",k.x).attr("y",o).text(j+" ft").style("visibility","hidden"):this._mouseHeightFocusLabel.attr("x",k.x).attr("y",o).text(j+" m").style("visibility","hidden")
                } else this._marker?this._marker.setLatLng(i):this._marker=new L.Marker(i).addTo(this._map)
            }
        },
        _addGeoJSONData:function(a){
                                var b=this.options;
                                if(a){
                                    for(var c=this._data||[],d=this._dist||0,e=this._maxElevation||0,f=0;f<a.length;f++){
                                        var g=new L.LatLng(a[f][1],a[f][0]),
                                            h=new L.LatLng(a[f?f-1:0][1],a[f?f-1:0][0]),
                                            i=b.imperial?g.distanceTo(h)*this.__mileFactor:g.distanceTo(h);
                                        d+=Math.round(i/1e3*1e5)/1e5,e=e<a[f][2]?a[f][2]:e,c.push({dist:d,altitude:b.imperial?a[f][2]*this.__footFactor:a[f][2],x:a[f][0],y:a[f][1],latlng:g})
                                    }
                                    this._dist=d,this._data=c,e=b.imperial?e*this.__footFactor:e,this._maxElevation=e
                                }
        },
        _addGPXdata:function(a,length,max_elev,n_points){
            var b=this.options;
            if(a){
                const width = this._width();
                const inc = Math.max(1, Math.floor(n_points / width));
                for(var c=this._data||[],d=this._dist||0,f=0;f<a.length;f+=inc){
                    c.push({
                        dist:d+a[f]._dist*(b.imperial?this.__mileFactor:1),
                        altitude:a[f].meta.ele*(b.imperial?this.__footFactor:1),
                        x:a[f].lng,
                        y:a[f].lat,
                        latlng:a[f],
                        index:f
                    })
                }
                if (a.length > 0 && (a.length-1) % inc != 0) {
                    c.push({
                        dist:d+a[a.length-1]._dist*(b.imperial?this.__mileFactor:1),
                        altitude:a[a.length-1].meta.ele*(b.imperial?this.__footFactor:1),
                        x:a[a.length-1].lng,
                        y:a[a.length-1].lat,
                        latlng:a[a.length-1],
                        index:a.length-1
                    })
                }
                this._data = c;
                if (b.imperial) {
                    max_elev *= this.__footFactor;
                    length *= this.__mileFactor;
                }
                if (max_elev < 1) max_elev = 1;
                this._maxElevation = this._maxElevation ? Math.max(this._maxElevation, max_elev) : max_elev;
                this._dist = this._dist ? this._dist + length : length;
            }
        },
         _calculateFullExtent:function(a){
                                if(!a||a.length<1)
                                    throw new Error("no data in parameters");
                                var b=new L.latLngBounds(a[0].latlng,a[0].latlng);
                                return a.forEach(function(a){b.extend(a.latlng)}),b
         },
         addData:function(a,length,max_elev,n_points){
                                this._addGPXdata(a,length,max_elev,n_points),
                                this._container&&this._applyData(),
                                this._addSliderCircles()
         },
         _handleLayerMouseOver:function(a){
                                if(this._data&&0!==this._data.length){
                                    var b=a.latlng,c=this._findItemForLatLng(b);
                                    if(c){
                                        var d=c.xDiagCoord;
                                        this._showDiagramIndicator(c,d)
                                    }
                                }
         },
         _showDiagramIndicator:function(a,b){
                                var c=this.options;
                                this._focusG.style("visibility","visible"),
                                this._mousefocus.attr("x1",b).attr("y1",0).attr("x2",b).attr("y2",this._height()).classed("hidden",!1);
                                var d=a.altitude,e=a.dist,f=(a.latlng,c.hoverNumber.formatter(d,c.hoverNumber.decimalsY)),g=c.hoverNumber.formatter(e,c.hoverNumber.decimalsX);
                                c.imperial?(this._focuslabelX.attr("x",b).text(f+" ft"),this._focuslabelY.attr("y",this._height()-5).attr("x",b).text(g+" mi")):(this._focuslabelX.attr("x",b).text(f+" m"),
                                this._focuslabelY.attr("y",this._height()-5).attr("x",b).text(g+" km"))
        },
        _applyData:function(){
                                var a=d3.extent(this._data,function(a){
                                    return a.dist
                                }),
                                b=d3.extent(this._data,function(a){return a.altitude}),
                                c=this.options;
                                void 0!==c.yAxisMin&&(c.yAxisMin<b[0]||c.forceAxisBounds)&&(b[0]=c.yAxisMin),
                                void 0!==c.yAxisMax&&(c.yAxisMax>b[1]||c.forceAxisBounds)&&(b[1]=c.yAxisMax),
                                this._x.domain(a),
                                this._y.domain(b),
                                this._areapath.datum(this._data).attr("d",this._area),
                                this._updateAxis(),
                                this._fullExtent=this._calculateFullExtent(this._data)
        },
        _clearData:function(){
                                this._data=null,this._dist=null,this._maxElevation=null
        },
        clear:function(){
                                this._clearData(),this._areapath&&(this._areapath.attr("d","M0 0"),this._x.domain([0,1]),this._y.domain([0,1]),this._updateAxis(),this._removeSliderCircles())
        },
        hide:function(){
            this._container.style.display="none"
        },
        show:function(){this._container.style.display="block"},
        display_cursor_data:function(d, v, e, s) {
            const distance = this.buttons.live_distance;
            const speed = this.buttons.live_speed;
            const elevation = this.buttons.live_elevation;
            const slope = this.buttons.live_slope;

            if (v == Infinity || isNaN(v)) v = 0;
            if (s == Infinity || isNaN(s)) s = 0;

            if (this.buttons.km) distance.innerHTML = d.toFixed(1) + ' ' + this.buttons.unit_kilometers_text;
            else distance.innerHTML = d.toFixed(1) + ' ' + this.buttons.unit_miles_text;
            if (this.buttons.cycling) {
                if (this.buttons.km) speed.innerHTML = v.toFixed(1) + ' ' + this.buttons.unit_kilometers_text + '/' + this.buttons.unit_hours_text;
                else speed.innerHTML = v.toFixed(1) + ' ' + this.buttons.unit_miles_text + '/' + this.buttons.unit_hours_text;
            } else {
                if (v > 0) {
                    v /= 60;
                    v = 1.0 / v;
                    v *= 1000 * 60;
                } else if (v < 0) v = 0;
                if (this.buttons.km) speed.innerHTML = this.total.msToTimeMin(v) + ' ' + this.buttons.unit_minutes_text + '/' + this.buttons.unit_kilometers_text;
                else speed.innerHTML = this.total.msToTimeMin(v) + ' ' + this.buttons.unit_minutes_text + '/' + this.buttons.unit_miles_text;
            }
            if (this.buttons.km) elevation.innerHTML = e.toFixed(0) + ' ' + this.buttons.unit_meters_text;
            else elevation.innerHTML = e.toFixed(0) + ' ' + this.buttons.unit_feet_text;
            if (!this.buttons.km) s = s / 1.60934 / 3.28084;
            slope.innerHTML = s.toFixed(1) + ' %';

            distance.style.textAlign = "right";
            speed.style.textAlign = "right";
            elevation.style.textAlign = "right";
            slope.style.textAlign = "right";
        },
        hide_cursor_data:function() {
            const distance = this.buttons.live_distance;
            const speed = this.buttons.live_speed;
            const elevation = this.buttons.live_elevation;
            const slope = this.buttons.live_slope;

            distance.innerHTML = '--';
            speed.innerHTML = '--';
            elevation.innerHTML = '--';
            slope.innerHTML = '--';

            distance.style.textAlign = "center";
            speed.style.textAlign = "center";
            elevation.style.textAlign = "center";
            slope.style.textAlign = "center";
        }
        }
    ),
    L.control.elevation=function(a){return new L.Control.Elevation(a)};
